syntax = "proto3";

package augur;

// Note that Google doesn't support generation of JavaScript fromObject() functions
// https://github.com/google/protobuf/blob/579f81e1c66d64395031a1bbcb54ba7a44dade55/js/message.js#L178
// https://github.com/google/protobuf/issues/1591

service MarketsApi {
	rpc GetMarkets(GetMarketsRequest) returns (GetMarketsResponse) {}
	rpc GetMarketsInfo(GetMarketsInfoRequest) returns (GetMarketsInfoResponse) {}
	rpc GetMarketsInCategory(GetMarketsInCategoryRequest) returns (GetMarketsInCategoryResponse) {}
	rpc GetOrders(GetOrdersRequest) returns (GetOrdersResponse) {}
	rpc BulkGetOrders(BulkGetOrdersRequest) returns (BulkGetOrdersResponse) {}
	rpc GetMarketPriceHistory(GetMarketPriceHistoryRequest) returns (GetMarketPriceHistoryResponse) {}
	rpc BulkGetMarketPriceHistory(BulkGetMarketPriceHistoryRequest) returns	(BulkGetMarketPriceHistoryResponse) {}
};

message GetMarketsRequest {
	string universe = 1;
	string creator = 2;
	string category = 3;
	string reporting_state = 4;
	string fee_window = 5;
	string designated_reporter = 6;
	string sort_by = 7;
	bool is_sort_descending = 8;
	uint32 limit = 9;
	uint32 offset = 10;
};

message GetMarketsResponse {
	repeated string market_addresses = 1;
};

message GetMarketsInfoRequest {
	repeated string market_addresses = 2;
};

message GetMarketsInfoResponse {
	repeated MarketInfo market_info = 1;
};

message MarketInfo {
	string id = 1;
	string universe = 2;
	string market_type = 3;
	uint32 num_outcomes = 4;
	string min_price = 5;
	string max_price = 6;
	string cumulative_scale = 7;
	string author = 8;
	uint64 creation_time = 9;
	uint64 creation_block = 10;
	string creation_fee = 11;
	string settlement_fee = 12;
	string reporting_fee_rate = 13;
	string market_creator_fee_rate = 14;
	string market_creator_fees_balance = 15;
	string market_creator_mailbox = 16;
	string market_creator_mailbox_owner = 17;
	string initial_report_size = 18;
	string category = 19;
	repeated string tags = 20;
	string volume = 21;
	string outstanding_shares = 22;
	string fee_window = 23;
	uint64 end_time = 24;
	uint64 finalization_block_number = 25;
	uint64 finalization_time = 26;
	ReportingState reporting_state = 27;
	bool forking = 28;
	bool needs_migration = 29;
	string description = 30;
	string details = 31;
	string scalar_denomination = 32;
	string designated_reporter = 33;
	string designated_report_stake = 34;
	string resolution_source = 35;
	string num_ticks = 36;
	string tick_size = 37;
	NormalizedPayout consensus = 38;
	repeated OutcomeInfo outcomes = 39;
};

message NormalizedPayout {
	bool is_invalid = 1;
	repeated string payout = 2;
};

message OutcomeInfo {
	uint64 id = 1;
	string volume = 2;
	string price = 3;
	string description = 4;
};

enum ReportingState {
	PRE_REPORTING = 0;
	DESIGNATED_REPORTING = 1;
	OPEN_REPORTING = 2;
	CROWDSOURCING_DISPUTE = 3;
	AWAITING_NEXT_WINDOW = 4;
	AWAITING_FINALIZATION = 5;
	FINALIZED = 6;
	FORKING = 7;
	AWAITING_NO_REPORT_MIGRATION = 8;
	AWAITING_FORK_MIGRATION = 9;
};

message GetMarketsInCategoryRequest {
	string universe = 1;
	string category = 2;
	string sort_by = 3;
	string is_sort_descending = 4;
	string limit = 5;
	string offset = 6;
};

message GetMarketsInCategoryResponse {
	repeated string market_addresses = 1;
};

// BulkGetOrdersRequest provides a way to execute O(N) GetOrdersRequest in a single round trip. However, you may not need it since GetOrdersRequest returns orders for all markets if the GetOrdersRequest.market_id filter is empty.
message BulkGetOrdersRequest {
	repeated GetOrdersRequest requests = 1;
};

message BulkGetOrdersResponse {
	repeated GetOrdersResponse responses = 1; // GetOrdersResponse has its own indexing, so this bulk response doesn't need its own indexing for the client to be able to interpret the response.
};

message GetOrdersRequest {
	string universe = 1;
	string market_id = 2;
	uint64 outcome = 3;
	OrderType order_type = 4;
	string creator = 5;
	OrderState order_state = 6;
	uint64 earliest_creation_time  = 7;
	uint64 latest_creation_time = 8;
	string sort_by = 9;
	bool is_sort_descending = 10;
	string limit = 11;
	string offset = 12;
};

message GetOrdersResponse {
	// These nested message types model `interface UIOrders` in types.ts. It is necessary to have multiple message types because proto3 doesn't support nested maps (and this augur-node API call returns nested maps).
	message OrdersByOrderIdByOrderTypeByOutcome {
		map<uint64, OrdersByOrderIdByOrderType> orders_by_order_id_by_order_type_by_outcome = 1; // map key is OutcomeInfo.id; all these orders are for the same marketId
	}
	message OrdersByOrderIdByOrderType {
		// enum is an invalid map key, so we'll have a list for each of these sub-maps.
		repeated OrdersByOrderId buy_orders_by_order_id = 1;
		repeated OrdersByOrderId sell_orders_by_order_id = 2;
	}
	message OrdersByOrderId {
		map<string, Order> orders_by_order_id = 1; // ie. map key is Order.order_id
	}
	map<string, OrdersByOrderIdByOrderTypeByOutcome> orders_by_order_id_by_order_type_by_outcome_by_market_id = 1; // map key is MarketInfo.id. GetOrdersRequest allows zero or one market ID, and if zero then the response will include orders from multiple markets, which is why this is indexed by market id.
};

message Order {
	string order_id = 1;
	string transaction_hash = 2;
	uint64 log_index = 3;
	string share_token = 4;
	string owner = 5;
	uint64 creation_time = 6;
	uint64 creation_block_number = 7;
	OrderState order_state = 8;
	string price = 9;
	string amount = 10;
	string original_amount = 11;
	string full_precision_price = 12;
	string full_precision_amount = 13;
	string original_full_precision_amount = 14;
	string tokens_escrowed = 15;
	string shares_escrowed = 16;
	// canceled_* fields are omitted if this Order isn't cancelled
	uint64 canceled_block_number = 17; // canceled_block_number is string in types.ts, but we have chosen to model as uint64 due to expectation that it's a natural number
	string canceled_transaction_hash = 18;
	uint64 canceled_transaction_time = 19; // canceled_transaction_time is string in types.ts, but we have chosen to model as uint64 due to expectation that it's a timestamp (for which we have a convention of using unix seconds since epoch in this API)
};

enum OrderType {
	BUY = 0;
	SELL = 1;
};

enum OrderState {
	ALL = 0;
	OPEN = 1;
	CLOSED = 2;
	CANCELED = 3; // the augur-node database requires this to be the American spelling, "CANCELED", but the augur.js documentation spells it the British way with two Ls "CANCELLED".
};

// BulkMarketPriceHistoryRequest provides a way to execute O(N) GetMarketPriceHistoryRequest in a single round trip.
message BulkGetMarketPriceHistoryRequest {
	repeated GetMarketPriceHistoryRequest requests = 1;
};

message BulkGetMarketPriceHistoryResponse {
	map<string, GetMarketPriceHistoryResponse> responses_by_market_id = 1; // ie. map key is MarketInfo.id for market_id in BulkMarketPriceHistoryRequest.requests*.market_id.
};

message GetMarketPriceHistoryRequest {
	string market_id = 1;
};

message GetMarketPriceHistoryResponse {
	MarketPriceHistory market_price_history = 1;
};

message MarketPriceHistory {
	map<uint64, ListTimestampedPriceAmount> timestamped_price_amount_by_outcome = 1; // map key is OutcomeInfo.id for this market; ie. the list of TimestampedPriceAmount are all historical prices for that outcome
};

message ListTimestampedPriceAmount {
	repeated TimestampedPriceAmount timestamped_price_amounts = 1;
};

message TimestampedPriceAmount {
	string price = 1;
	string amount = 2;
	uint64 timestamp = 3;
};
